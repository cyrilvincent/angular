Routing
=======
1/ Créer le module app-routing avec ng generate module app-routing --flat --module=app
    --flat indique qu'il ne créé pas de sous dossier
2/ Copier les fichiers app* dans app/
3/ Copier le contenu de app-routing.module.ts
4/ Dans le composant app.component.html effacer <app-games></app-games> et <app-cart></app-cart> le cas échéant
5/ A la place ajouter le composant <router-outlet></router-outlet>
6/ Tester, pourquoi l'URL se termine pas /games ?
7/ Dans app.component.html ajouter le code suivant après la balise h1
    <nav><a routerLink="/games">Games</a></nav>
8/ Tester, il ne se produit pas grand chose car c'est un lien AJAX sur lui même
9/ Dans GameService ajouter les méthodes suivantes :
    getGame(id: number): Observable<VideoGame> {
      this.messageService.add(`GameService: fetched hero id=${id}`);
      return of(VIDEOGAMES.find(game => game.id === id));
    }

    getTop4(): Observable<VideoGame[]> {
        this.messageService.add('GameService: fetched TOP4 games');
        return of(VIDEOGAMES.sort((x, y) => y.nbView - x.nbView).slice(0, 4));
    }

    incrementNbView(game: VideoGame): void {
        game.nbView++;
        console.log(`Game.nbView++ ${game.id}`);
    }
10/ Dans games.component.html ajouter <a routerLink="/detail/{{game.id}}"> de {{game.title}}
11/ Enlever la balise H2 et son contenu
12/ Enlever la directive app-game-detail
13/ Dans games.component.css ajouter le bloc
    .games mat-list-item a {
        text-decoration: none;
        color: black
    }
14/ Dans le composant GameDetail ajouter le code suivant :
    import { ActivatedRoute } from '@angular/router';
    import { Location } from '@angular/common';
13/ Puis les injecter
    constructor(private gameService: GameService, private route: ActivatedRoute, private location: Location) {}
14/ Puis ajouter les méthodes suivantes:
    incrementNbView() {
        if (this.game) {
            this.gameService.incrementNbView(this.game);
        }
    }

    getGame(): void {
        const id = +this.route.snapshot.paramMap.get('id');
        this.gameService.getGame(id)
            .subscribe(game => this.game = game);
    }

    goBack(): void {
        this.router.navigate(['/games']);
    }
15/ Appeler getGame & incrementNbView depuis ngOnInit()
16/ Si elle existe commenter onChanges()
17/ Puis dans le template HTML ajouter avant le dernier <div> : <button (click)="goBack()">go back</button>
18/ Tester
19/ Créer le composant dashboard
20/ Copier dashboard/* dans app/dashboard/
21/ Ajouter la route dashboard
22/ Dans App ajouter un lien vers dashboard
23/ Tester, vérifier que les games sont triés par nbView
24/ Dans GameService.getGames trier les games par id
25/ Tester
