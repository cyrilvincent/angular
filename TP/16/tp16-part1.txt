REST Service
============
1/ Installer InMemoryWebApi : npm install angular-in-memory-web-api --save
2/ Copier in-memory-data.service.ts dans src/app/
3/ Dans app.module ajouter sans toucher la section imports
    import { HttpClientModule }    from '@angular/common/http';
    import { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';
    import { InMemoryDataService }  from './in-memory-data.service';
    // /!\ la section imports est un peu complexe
4/ Dans la section imports il faut ajouter:
    HttpClientModule,
    HttpClientInMemoryWebApiModule.forRoot(
      InMemoryDataService, { dataEncapsulation: false }
    )
5/ Dans environments/environment.ts ajouter la variable gamesUrl: 'api/games', dans la constante environment
6/ Dans GameService ajouter
    import { HttpClient, HttpHeaders } from '@angular/common/http';
    import { environment } from '../environments/environment';
7/ Injecter http: HttpClient
8/ Dans getGames remplacer le code par le code suivant :
    return this.http.get<VideoGame[]>(environment.gamesUrl);
9/ Pourquoi la signature de la méthode ne change pas ?
10/ Tester
11/ Dans getGame mettre à jour le code pour l'URL en prenant pour exemple : api/games/1 pour l'id 1
12/ Tester, remarquer l'asynchronisme, pourquoi nbView reste à 0 ?
13/ Dans GameService ajouter le code suivant:
    const httpOptions = {
        headers: new HttpHeaders({ 'Content-Type': 'application/json' })
    };
14/ Ajouter la méthode
    updateGame (game: VideoGame): Observable<any> {
        console.log(`updated game id=${game.id}`);
        return this.http.put(environment.gamesUrl, game, httpOptions);
    }
15/ Modifier GameDetailComponent la méthode suivante:
    getGame(): void {
        const id = +this.route.snapshot.paramMap.get('id');
        this.gameService.getGame(id)
            .subscribe(game => {
                this.game = game;
                this.game.nbView += 1;
                this.gameService.updateGame(this.game).subscribe();
            });
    }
16/ Tester, le dashboard ne fonctionne plus correctement car il n'est pas branché au service
17/ Modifier la méthode suivante :
    getTop4(): Observable<VideoGame[]> {
        this.messageService.add('GameService: fetched TOP4 games');
        return this.getGames().pipe(
            map(games => games.sort((x, y) => y.nbView - x.nbView).slice(0, 4))
        );
    }
18/ Tester
19/ Dans game-detail.component.html ajouter à coté de l'input : <button (click)="save()">save</button>
20/ Dans GameDetailComponent ajouter
    save(): void {
        this.gameService.updateGame(this.game)
            .subscribe(() => this.goBack());
    }
21/ Tester
22/ Dans GameService ajouter
    deleteGame (id: number): Observable<VideoGame> {
        console.log(`delete game id=${id}`);
        return this.http.delete<VideoGame>(`${environment.gamesUrl}/${id}`, httpOptions);
    }
23/ Dans GamesComponent ajouter
    delete(game: VideoGame): void {
        this.games = this.games.filter(g => g !== game);
        this.gameService.deleteGame(game.id).subscribe();
    }
24/ Dans games.component.html ajouter sur chaque ligne
        <i class="material-icons" (click)="delete(game)">
          delete
        </i>
Facultatif
25/ Créer le composant game-create
26/ Copier game-create.*
27/ Dans GameService ajouter
    addGame (game: VideoGame): Observable<VideoGame> {
        console.log(`add game id=${game.id} ${game.title}`);
        return this.http.post<VideoGame>(environment.gamesUrl, game, httpOptions);
    }
28/ Ajouter une route vers GameCreateComponent
29/ Ajouter un lien dans AppComponent
